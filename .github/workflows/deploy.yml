name: Github Pages Astro CI

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branchâ€™s name
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v3
      - name: Check lockfiles
        shell: "bash"
        env:
          INPUT_PM: ${{ inputs.package-manager }}
        run: |
          len=`echo $INPUT_PM | wc -c`
          if [ $len -gt 1 ]; then
              echo "PACKAGE_MANAGER=$INPUT_PM" >> $GITHUB_ENV
          elif [ $(find "." -name "pnpm-lock.yaml") ]; then
              echo "PACKAGE_MANAGER=pnpm" >> $GITHUB_ENV
              echo "LOCKFILE=pnpm-lock.yaml" >> $GITHUB_ENV
          elif [ $(find "." -name "yarn.lock") ]; then 
              echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
              echo "LOCKFILE=yarn.lock" >> $GITHUB_ENV
          elif [ $(find "." -name "package-lock.json") ]; then 
              echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
              echo "LOCKFILE=package-lock.json" >> $GITHUB_ENV
          else
              echo "No lockfile found.
          Please specify your preferred \"package-manager\" in the action configuration."
              exit 1
          fi
      - name: Setup PNPM
        if: ${{ env.PACKAGE_MANAGER == 'pnpm' }}
        uses: pnpm/action-setup@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        if: inputs.resolve-dep-from-path == true
        with:
          node-version: ${{ inputs.node-version }}
          cache: ${{ env.PACKAGE_MANAGER }}
          cache-dependency-path: "${{ inputs.path }}/${{ env.LOCKFILE }}"

      - name: Setup Node
        uses: actions/setup-node@v3
        if: inputs.resolve-dep-from-path == false
        with:
          node-version: ${{ inputs.node-version }}
          cache: ${{ env.PACKAGE_MANAGER }}

      - name: Install
        shell: "bash"
        run: |
          cd ${{ inputs.path }}
          $PACKAGE_MANAGER install

      - name: Build
        shell: "bash"
        run: |
          cd ${{ inputs.path }}
          $PACKAGE_MANAGER run build

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: "${{ inputs.path }}/dist/"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
